{"uid":"adb1481a4807bf4f","name":"ID:6 -- 图片上传成功","fullName":"testcases.test_runner.TestRunner#test_case","historyId":"2134e079697fd08f52d70ec9c098a67a","time":{"start":1759544742475,"stop":1759544742979,"duration":504},"status":"failed","statusMessage":"AssertionError","statusTrace":"self = <test_runner.TestRunner object at 0x1049bb230>\ncase = {'check': '$..msg', 'data': None, 'expected': '上传成功', 'feature': '图片上传', ...}\n\n    @pytest.mark.parametrize(\"case\", data)\n    def test_case(self, case):\n    \n            # 引用全局的all\n            all = self.all\n    \n            #根据all的值，渲染case\n            case = eval(Template(str(case)).render(all))\n    \n            #初始化allure报告\n            allure_init(case=case)\n    \n            # 0.测试用例的描述信息日志\n            logging.info(f\"0.用例ID：{case[\"id\"]} 模块：{case[\"feature\"]} 场景：{case[\"story\"]} 标题：{case[\"title\"]}\")\n    \n            # 核心步骤1: 解析请求数据\n            request_data = analyse_case(case)\n    \n            #核心步骤2: 发起请求，得到响应结果\n            res = send_http_request(**request_data)\n    \n            #核心步骤3: 处理断言\n            #http响应断言\n>           http_assert(case, res)\n\ntestcases/test_runner.py:53: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncase = {'check': '$..msg', 'data': None, 'expected': '上传成功', 'feature': '图片上传', ...}\nres = <Response [200]>\n\n    @allure.step(\"3.HTTP响应断言\")\n    def http_assert(case, res):\n        if case[\"check\"]:\n            r = jsonpath.jsonpath(res.json(), case[\"check\"])[0]\n            logging.info(f\"3.HTTP响应断言: 实际结果【{r}】 == 预期结果【{case[\"expected\"]}】\")\n            # assert 实际结果 == 预期结果\n>           assert r == case[\"expected\"]\n                   ^^^^^^^^^^^^^^^^^^^^^\nE           AssertionError\n\nutils/asserts.py:12: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"AssertionError","statusTrace":"self = <test_runner.TestRunner object at 0x1049bb230>\ncase = {'check': '$..msg', 'data': None, 'expected': '上传成功', 'feature': '图片上传', ...}\n\n    @pytest.mark.parametrize(\"case\", data)\n    def test_case(self, case):\n    \n            # 引用全局的all\n            all = self.all\n    \n            #根据all的值，渲染case\n            case = eval(Template(str(case)).render(all))\n    \n            #初始化allure报告\n            allure_init(case=case)\n    \n            # 0.测试用例的描述信息日志\n            logging.info(f\"0.用例ID：{case[\"id\"]} 模块：{case[\"feature\"]} 场景：{case[\"story\"]} 标题：{case[\"title\"]}\")\n    \n            # 核心步骤1: 解析请求数据\n            request_data = analyse_case(case)\n    \n            #核心步骤2: 发起请求，得到响应结果\n            res = send_http_request(**request_data)\n    \n            #核心步骤3: 处理断言\n            #http响应断言\n>           http_assert(case, res)\n\ntestcases/test_runner.py:53: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncase = {'check': '$..msg', 'data': None, 'expected': '上传成功', 'feature': '图片上传', ...}\nres = <Response [200]>\n\n    @allure.step(\"3.HTTP响应断言\")\n    def http_assert(case, res):\n        if case[\"check\"]:\n            r = jsonpath.jsonpath(res.json(), case[\"check\"])[0]\n            logging.info(f\"3.HTTP响应断言: 实际结果【{r}】 == 预期结果【{case[\"expected\"]}】\")\n            # assert 实际结果 == 预期结果\n>           assert r == case[\"expected\"]\n                   ^^^^^^^^^^^^^^^^^^^^^\nE           AssertionError\n\nutils/asserts.py:12: AssertionError","steps":[{"name":"1.解析请求数据","time":{"start":1759544742476,"stop":1759544742477,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"case","value":"{'id': 6, 'feature': '图片上传', 'story': '上传成功', 'title': '图片上传成功', 'method': 'post', 'path': '/upload', 'headers': '{\"Authorization\": \"\"}', 'params': None, 'data': None, 'json': None, 'files': '{\"file\": (\"1.jpg\", open(\"./file/1.jpg\", \"rb\"), \"jpg\")}', 'check': '$..msg', 'expected': '上传成功', 'sql_check': None, 'sql_expected': None, 'jsonExData': None, 'sqlExData': None, 'is_true': True}"}],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":true,"attachmentStep":false},{"name":"2.发送HTTP请求","time":{"start":1759544742477,"stop":1759544742977,"duration":500},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"method","value":"'post'"},{"name":"url","value":"'http://8.138.193.96:8888/api/private/v1/upload'"},{"name":"headers","value":"{'Authorization': ''}"},{"name":"params","value":"None"},{"name":"data","value":"None"},{"name":"json","value":"None"},{"name":"files","value":"{'file': ('1.jpg', <_io.BufferedReader name='./file/1.jpg'>, 'jpg')}"}],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":true,"attachmentStep":false},{"name":"3.HTTP响应断言","time":{"start":1759544742977,"stop":1759544742978,"duration":1},"status":"failed","statusMessage":"AssertionError\n","statusTrace":"  File \"/Users/swj_795/venvs/swj-env/lib/python3.12/site-packages/allure_commons/_allure.py\", line 202, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/Users/swj_795/Desktop/北梦测/Bei-Projects/5.17Bei-pytestFarmework/utils/asserts.py\", line 12, in http_assert\n    assert r == case[\"expected\"]\n           ^^^^^^^^^^^^^^^^^^^^^\n","steps":[],"attachments":[],"parameters":[{"name":"case","value":"{'id': 6, 'feature': '图片上传', 'story': '上传成功', 'title': '图片上传成功', 'method': 'post', 'path': '/upload', 'headers': '{\"Authorization\": \"\"}', 'params': None, 'data': None, 'json': None, 'files': '{\"file\": (\"1.jpg\", open(\"./file/1.jpg\", \"rb\"), \"jpg\")}', 'check': '$..msg', 'expected': '上传成功', 'sql_check': None, 'sql_expected': None, 'jsonExData': None, 'sqlExData': None, 'is_true': True}"},{"name":"res","value":"<Response [200]>"}],"shouldDisplayMessage":true,"attachmentsCount":0,"stepsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"87b64fd010d941c7","name":"log","source":"87b64fd010d941c7.txt","type":"text/plain","size":656}],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":1,"stepsCount":3,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"feature","value":"图片上传"},{"name":"story","value":"上传成功"},{"name":"parentSuite","value":"testcases"},{"name":"suite","value":"test_runner"},{"name":"subSuite","value":"TestRunner"},{"name":"host","value":"WenjideMacBook-Pro.local"},{"name":"thread","value":"16839-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"testcases.test_runner"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"case","value":"{'id': 6, 'feature': '图片上传', 'story': '上传成功', 'title': '图片上传成功', 'method': 'post', 'path': '/upload', 'headers': '{\"Authorization\": \"{{TOKEN}}\"}', 'params': None, 'data': None, 'json': None, 'files': '{\"file\": (\"1.jpg\", open(\"./file/1.jpg\", \"rb\"), \"jpg\")}', 'check': '$..msg', 'expected': '上传成功', 'sql_check': None, 'sql_expected': None, 'jsonExData': None, 'sqlExData': None, 'is_true': True}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[]}],"tags":[]},"source":"adb1481a4807bf4f.json","parameterValues":["{'id': 6, 'feature': '图片上传', 'story': '上传成功', 'title': '图片上传成功', 'method': 'post', 'path': '/upload', 'headers': '{\"Authorization\": \"{{TOKEN}}\"}', 'params': None, 'data': None, 'json': None, 'files': '{\"file\": (\"1.jpg\", open(\"./file/1.jpg\", \"rb\"), \"jpg\")}', 'check': '$..msg', 'expected': '上传成功', 'sql_check': None, 'sql_expected': None, 'jsonExData': None, 'sqlExData': None, 'is_true': True}"]}